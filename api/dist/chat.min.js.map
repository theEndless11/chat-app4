{"version":3,"sources":["chat.js"],"names":["require","Server","module","exports","res","socket","server","console","log","io","on","data","emit","username","status","newMessage","message","timestamp","Date","toLocaleTimeString","isPrivate","receiver","sender","to"],"mappings":"0BAAmBA,QAAQ,aAAnBC,gBAAAA,OAERC,OAAOC,QAFYH,SAAAA,EAAQI,GAAnBH,EAAAA,UAGU,gBAAiB,uBADnCC,IAAOC,EAAP,IAAiBF,OAAAG,EAAAC,OAAcC,QAGnBF,EAAGC,OAAIJ,OAAWI,KAItBE,QAAQC,IAAI,yBADXJ,EAAIC,OAAOC,OAAOG,GAAIA,GAKpBC,GAAG,aAAc,SAACL,GAAfE,QAAAC,IAAc,oBAIVH,EAAIK,GAAA,gBAAiB,SAAAC,GAAU,IACZA,EADYA,EACZA,SACdC,EAAKA,KAAA,cAAe,CAAAC,SAAAA,EAAAC,OAAA,WAAED,EAAAA,UAAFD,KAAA,cAAA,CAAAC,SAAAA,MACYA,EAAQH,GAARG,eAAAA,SAAAA,GAAAA,IAOjCE,EAAa,CAAEF,SAPrBF,EAAAE,SAO+BG,QAP/BL,EAAAK,QAOwCC,WAJ5C,IAAAC,MAAAC,qBAIuDC,WAAW,GAHxDX,EAAAG,KAAA,cAAgBG,KAGhBA,EAAAA,GAAU,uBAAG,SAAAJ,GAAA,IAAEE,EAAFF,EAAEE,OAAFQ,EAAAV,EAAAU,SAAqBJ,EAArB,CAAAJ,SAAAS,EAAAN,QAAAL,EAAAK,QAAAC,WAAA,IAAAC,MAAAC,qBAAAC,WAAA,GAAyCC,GAA5DZ,EAAAc,GAAAF,GAAAT,KAAA,sBAAAG,KAMQO,EADgCZ,GACFC,aADE,WACxBU,QAAsBV,IAAtBU,4BAEuBL,EAAAA,KAAAA","file":"chat.min.js","sourcesContent":["const { Server } = require('socket.io');\r\n\r\nmodule.exports = (req, res) => {\r\n    res.setHeader('Cache-Control', 'no-store, max-age=0');  // Prevent caching\r\n\r\n    const io = new Server(res.socket.server);\r\n    \r\n    // Enable WebSocket connection on Vercel's serverless functions\r\n    if (!res.socket.server.io) {\r\n        console.log('New socket.io server');\r\n        res.socket.server.io = io;\r\n        \r\n        // Handle connections and broadcasting\r\n        io.on('connection', (socket) => {\r\n            console.log('A user connected');\r\n            \r\n            // Handle user registration\r\n            socket.on('register_user', (data) => {\r\n                const { username } = data;\r\n                socket.emit('user_status', { username, status: 'online' });\r\n                socket.broadcast.emit('user_joined', { username });\r\n            });\r\n\r\n            // Handle public messages\r\n            socket.on('send_message', (data) => {\r\n                const { username, message } = data;\r\n                const timestamp = new Date().toLocaleTimeString();\r\n                const newMessage = { username, message, timestamp, isPrivate: false };\r\n                io.emit('new_message', newMessage);\r\n            });\r\n\r\n            // Handle private messages\r\n            socket.on('send_private_message', (data) => {\r\n                const { sender, receiver, message } = data;\r\n                const timestamp = new Date().toLocaleTimeString();\r\n                const newMessage = { username: sender, message, timestamp, isPrivate: true };\r\n                if (receiver) {\r\n                    io.to(receiver).emit('new_private_message', newMessage);\r\n                }\r\n            });\r\n\r\n            // Handle disconnections\r\n            socket.on('disconnect', () => {\r\n                console.log('A user disconnected');\r\n            });\r\n        });\r\n    }\r\n    \r\n    res.send('Socket.io server running');\r\n};\r\n"]}